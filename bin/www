#!/usr/bin/env node

// Openshift

var port = normalizePort(process.env.OPENSHIFT_NODEJS_PORT || process.env.OPENSHIFT_INTERNAL_PORT || process.env.PORT || '3000');
var ip_address = process.env.OPENSHIFT_NODEJS_IP || process.env.OPENSHIFT_INTERNAL_IP || 'localhost';

// Get port from environment and store in Express.
//var port = normalizePort(process.env.PORT || '3000');


// Module dependencies.
var app = require('../app');
var debug = require('debug')('properties:server');
var http = require('http');

app.set('port', port);
app.set('ip', ip_address);

// Create HTTP server.
var server = http.createServer(app);


// Listen on provided port, on all network interfaces.
/*
server.listen(port, ip_address, function () {
  console.log( "Listening on " + ip_address + ", port " + port )
});
*/
server.listen(app.get('port'), app.get('ip'), function () {
   console.log("âœ” Express server listening at %s:%d ", app.get('ip'),app.get('port'));
});


//server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
